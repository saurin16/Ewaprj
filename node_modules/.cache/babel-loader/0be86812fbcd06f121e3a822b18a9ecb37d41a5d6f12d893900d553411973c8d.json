{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patel\\\\Desktop\\\\IIT\\\\SEM 3\\\\EWA\\\\Ewaprj\\\\src\\\\Component\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Chatbot.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const sendMessage = async () => {\n    if (input.trim() === \"\") return;\n    const userMessage = {\n      sender: \"user\",\n      message: input\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput(\"\");\n    try {\n      const response = await fetch(\"http://localhost:5005/webhooks/rest/webhook\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sender: \"user\",\n          message: input\n        })\n      });\n      const data = await response.json();\n      data.forEach(msg => {\n        const botMessage = {\n          sender: \"bot\",\n          message: msg.text || \"\",\n          buttons: msg.buttons || []\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n      });\n    } catch (error) {\n      console.error(\"Error in sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar\",\n        children: \"\\uD83D\\uDC64\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Chat with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"ANDON THE AiBOT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"online-status\",\n          children: \"We\\u2019re online\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), msg.buttons && msg.buttons.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-container\",\n          children: msg.buttons.map((button, btnIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => window.location.href = button.payload,\n            children: button.title\n          }, btnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => e.key === \"Enter\" && sendMessage(),\n        placeholder: \"Enter your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","sendMessage","trim","userMessage","sender","message","prevMessages","response","fetch","method","headers","body","JSON","stringify","data","json","forEach","msg","botMessage","text","buttons","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","length","button","btnIndex","onClick","window","location","href","payload","title","type","value","onChange","e","target","onKeyPress","key","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/patel/Desktop/IIT/SEM 3/EWA/Ewaprj/src/Component/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Chatbot.css'; // Import the CSS file\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const sendMessage = async () => {\r\n    if (input.trim() === \"\") return;\r\n    \r\n    const userMessage = { sender: \"user\", message: input };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n    setInput(\"\");\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5005/webhooks/rest/webhook\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ sender: \"user\", message: input })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      data.forEach((msg) => {\r\n        const botMessage = { sender: \"bot\", message: msg.text || \"\", buttons: msg.buttons || [] };\r\n        setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error in sending message:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"avatar\">ðŸ‘¤</div>\r\n        <div className=\"header-info\">\r\n          <p>Chat with</p>\r\n          <h3>ANDON THE AiBOT</h3>\r\n          <p className=\"online-status\">Weâ€™re online</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-window\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            <p>{msg.message}</p>\r\n            {msg.buttons && msg.buttons.length > 0 && (\r\n              <div className=\"buttons-container\">\r\n                {msg.buttons.map((button, btnIndex) => (\r\n                  <button \r\n                    key={btnIndex} \r\n                    onClick={() => window.location.href = button.payload}>\r\n                    {button.title}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"input-box\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\r\n          placeholder=\"Enter your message...\"\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}